version: "3.8"

networks:
  public_net:
    external: true
  private_net:
    external: true

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data:

services:
  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION}
    container_name: prometheus
    volumes:
      - ./prometheus_conf:/etc/prometheus
      - prometheus_data:/prometheus
    restart: on-failure
    networks:
      - public_net
      - private_net
    command:
      # from https://prometheus.io/docs/prometheus/latest/command-line/prometheus/
      - '--storage.tsdb.retention.time=${PROM_RETENTION_TIME}'
      - '--storage.tsdb.retention.size=${PROM_RETENTION_SIZE}'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
      - '--config.file=/etc/prometheus/prometheus.yml'
    labels:
      - traefik.enable=true
      - traefik.docker.network=public_net
      - traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.prometheus.entrypoints=http
      - traefik.http.routers.prometheus.middlewares=redirect-to-https
      - traefik.http.routers.prometheus-secure.rule=Host(`${PROMETHEUS_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.prometheus-secure.entrypoints=https
      - traefik.http.routers.prometheus-secure.tls=true
      - traefik.http.routers.prometheus-secure.tls.options=default
      - traefik.http.routers.prometheus-secure.tls.certresolver=default
      - traefik.http.services.prometheus-secure.loadbalancer.server.port=9090
      - traefik.http.routers.prometheus-secure.middlewares=auth
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning
    restart: on-failure
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_PATH_PROVISIONING=/etc/grafana/provisioning
      - GF_PATH_DATA=/var/lib/grafana
    networks:
      - public_net
      - private_net
    labels:
      - traefik.enable=true
      - traefik.docker.network=public_net
      - traefik.http.routers.grafana.rule=Host(`${GRAFANA_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.grafana.entrypoints=http
      - traefik.http.routers.grafana.middlewares=redirect-to-https
      - traefik.http.routers.grafana-secure.rule=Host(`${GRAFANA_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.grafana-secure.entrypoints=https
      - traefik.http.routers.grafana-secure.tls=true
      - traefik.http.routers.grafana-secure.tls.options=default
      - traefik.http.routers.grafana-secure.tls.certresolver=default
      - traefik.http.services.grafana-secure.loadbalancer.server.port=3000
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  alertmanager:
    image: prom/alertmanager:${ALERTMANAGER_VERSION}
    container_name: alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    restart: on-failure
    networks:
      - public_net
      - private_net
    labels:
      - traefik.enable=true
      - traefik.docker.network=public_net
      - traefik.http.routers.alertmanager.rule=Host(`${ALERTMANAGER_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.alertmanager.entrypoints=http
      - traefik.http.routers.alertmanager.middlewares=redirect-to-https
      - traefik.http.routers.alertmanager-secure.rule=Host(`${ALERTMANAGER_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.alertmanager-secure.entrypoints=https
      - traefik.http.routers.alertmanager-secure.tls=true
      - traefik.http.routers.alertmanager-secure.tls.options=default
      - traefik.http.routers.alertmanager-secure.tls.certresolver=default
      - traefik.http.services.alertmanager-secure.loadbalancer.server.port=9093
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  node-exporter:
    image: prom/node-exporter:${NODE_EXPORTER_VERSION}
    container_name: node-exporter
    restart: on-failure
    networks:
      - private_net
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  pushgateway:
    image: prom/pushgateway:${PUSHGATEWAY_VERSION}
    container_name: pushgateway
    restart: on-failure
    networks:
      - public_net
      - private_net
    labels:
      - traefik.enable=true
      - traefik.docker.network=public_net
      - traefik.http.routers.pushgateway.rule=Host(`${PUSHGATEWAY_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.pushgateway.entrypoints=http
      - traefik.http.routers.pushgateway.middlewares=redirect-to-https
      - traefik.http.routers.pushgateway-secure.rule=Host(`${PUSHGATEWAY_SUB_DOMAIN}.${DOMAIN}`)
      - traefik.http.routers.pushgateway-secure.entrypoints=https
      - traefik.http.routers.pushgateway-secure.tls=true
      - traefik.http.routers.pushgateway-secure.tls.options=default
      - traefik.http.routers.pushgateway-secure.tls.certresolver=default
      - traefik.http.services.pushgateway-secure.loadbalancer.server.port=9091
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9091/-/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION}
    container_name: cadvisor
    restart: on-failure
    networks:
      - private_net
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  blackbox-exporter:
    image: prom/blackbox-exporter:${BLACKBOX_EXPORTER_VERSION}
    container_name: blackbox-exporter
    restart: on-failure
    networks:
      - private_net
    volumes:
      - ./blackbox-exporter.yml:/etc/blackbox/blackbox.yml
    command: 
      - '--config.file=/etc/blackbox/blackbox.yml'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9115/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  loki:
      image: grafana/loki:${LOKI_VERSION}
      container_name: loki
      restart: on-failure
      command: -config.file=/etc/loki/local-config.yaml
      volumes:
        - ./loki.yml:/etc/loki/local-config.yaml
        - loki_data:/tmp/loki
      networks:
        - public_net
        - private_net
      labels:
        - traefik.enable=true
        - traefik.docker.network=public_net
        - traefik.http.routers.loki.rule=Host(`${LOKI_SUB_DOMAIN}.${DOMAIN}`)
        - traefik.http.routers.loki.entrypoints=http
        - traefik.http.routers.loki.middlewares=redirect-to-https
        - traefik.http.routers.loki-secure.rule=Host(`${LOKI_SUB_DOMAIN}.${DOMAIN}`)
        - traefik.http.routers.loki-secure.entrypoints=https
        - traefik.http.routers.loki-secure.tls=true
        - traefik.http.routers.loki-secure.tls.options=default
        - traefik.http.routers.loki-secure.tls.certresolver=default
        - traefik.http.services.loki-secure.loadbalancer.server.port=3100
      # healthcheck:
      #   test: ["CMD", "wget", "--quiet", "--tries=1", "--output-document=-", "http://localhost:3100/ready", "|", "grep", "-q", "-w", "ready", "||", "exit", "1"]
      #   interval: 10s
      #   timeout: 5s
      #   retries: 5
      #   start_period: 20s

  promtail:
      image: grafana/promtail:${PROMTAIL_VERSION}
      container_name: promtail-${HOSTNAME}
      hostname: promtail-${HOSTNAME}
      restart: on-failure
      volumes:
        - ./promtail.yml:/etc/promtail/config.yml
        - /var/run/docker.sock:/var/run/docker.sock:ro 
        - /var/lib/docker/containers:/var/lib/docker/containers:ro
        - /var/log:/var/log:ro
      command: -config.file=/etc/promtail/config.yml
      networks:
        - private_net
      # healthcheck:
      #   test: ["CMD-SHELL", "pgrep promtail > /dev/null || exit 1"]
      #   interval: 10s
      #   timeout: 5s
      #   retries: 3
      #   start_period: 5s